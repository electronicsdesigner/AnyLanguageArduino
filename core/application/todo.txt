# AnyLanguageArduino
-------------------------------------------------------------------------------

Get what you have working

Make for c++, juniper, haskino and rust

Add a Terminal Tab (serial should disconnect during upload)

Put a watcher on the source file - the programmer may have their preferred editor

Console and Terminal must have a maximum line count

[Get this code as clean as possible so that you can show it off]

[Write in c++ to make cross-platform and native running]

Share GitHub with Caleb (writer of Juniper)

Help tab - that directs you to websites (with the relevant tutorial information)
 - Specified in CONFIG file;
 - All the csv separated variables are websites (or HTML) with useful information

-------------------------------------------------------------------------------

Now make GUIs for the other FunctionaProgramming Arduino utilities.
This will let you compare Functional Programming in general, rather than a specific language implementation.
Do the same for Rust too!

1 - Add a Terminal Tab (serial should disconnect during upload)

2 - Same script to run the FileIndexService before starting
    - If service is already running, use that; otherwise
    - Run a new instance detached
    - By turning off the text printing, FileIndexService will run much faster

3 - Get this code as clean as possible (so that you can show it off)
    Make an ArduinoIDE that runs any language
    (as long as you can cross compile to c++)
    Make a demo in Haskell, Python, Rust, etc.

(Get it cross platform with Linux if possible)

4 - Make YouTube videos explaining how it works

5 - Write blog articles

6 - Post articles in every developer community Arduino, Python, Rust, Haskell, etc. so they can see their favourite language with an Arduino IDE





It is clear that many of these modules are getting use in many projects:
 - FileIndexService
 - Searcher
 - wx[InsertWidgetNameHere].py

These should be put in modules and uploaded to GitHub

Load a config file as a command line argument

Manage the Read Only status of the Compile button and Console input textbox
    If console command (including compile) in progress - inactivate these ctrls


# NOTICE: You cannot use the following; PIPE has a bug and crashes
# proc = subprocess.Popen(
    # [self.ScriptFile],
    # cwd=cwd,
    # shell=True, 
    # stdout=subprocess.PIPE, 
    # stderr=subprocess.STDOUT)
# while True:
    # output = proc.stdout.readline().decode()
    # if output == '' and proc.poll() is not None:
        # break
    # if output:
        # self.ConsoleTab.Text = self.ConsoleTab.Text + output

-------------------------------------------------------------------------

Specifying filename (and config file) upon program launch will be the simplest program example (simplified for publishing)

{OPTONAL:
    Drag file into textbox instead of autocomplete search (simplifies example for publishing)
     - drag doesnt let you create a new file
     - hence code file template is not required (if you do that)
}

Lexer and keywords can be part of .cfg file

Add a Terminal Tab (serial should disconnect during upload)

[Script file is either .bat or .sh - dont need to specify both in .ini file]

LastCalled and __upload_queue__ appear to do the same thing. Get rid of one

cwd no longer used in script upload(self) method

Icon should be defined in config file (along with default program description and welcome message)

Command line argument of config file MUST be provided 
 - Batch files (or windows shortcuts) to choose the editor for your chosen language
 - Make one for c++, juniper, haskino and rust

Put a watcher on the source file - the programmer may have their preferred editor

Console and Terminal must have a maximum line count

[.cfg should be .ini file to adhere to standard conventions]

[Get this code as clean as possible so that you can show it off]

[Write in c++ to make cross-platform and native running]

{OPTIONAL:
    A different app that would also handle the creation of new source code file from template
        It could allow you it to drag in ANY file type, and it reconfigures the GUI to suit that file type
            - i.e. config file not required at startup
            - if user drags folder - prompt for filename of new file
                - Perhaps also have a drop-down that lets them choose from all the config file types available
        Or it could be a simple dialog box that asks to open [existing|new] and if new, select a config file to load
            It would then launch the main program that has the text editor / console / script / terminal
}

-------------------------------------------------------------------------------